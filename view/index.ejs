<%- include('./partials/head') %>
<header>
  <h1>UltiTV Commentary Source</h1>
</header>
<main>
  <!-- Game Info -->
  <section class="cardGameInfo">
    <div class="card-inner">
      <h2><%= parsedGameData.field %></h2>
      <p><%= parsedGameData.gameStatus %> - <%= parsedGameData.division %></p>
    </div>
  </section>

  <!-- Config tab -->
  <section class="cardconfig">
    <div class="card-inner">
      <h3>Card Selector</h3>
      <div class="card-selector">
        <form name="">
          <label>
            <input type="button" name="" value="Points">
          </label>
          <label>
            <input type="button" value="Team 1">
          </label>
          <label>
            <input type="button" value="Team 2">
          </label>
          <label>
            <input type="button" value="Game Info">
          </label>
          <label>
            <input type="button" value="Scoreboard">
          </label>
        </form>
      </div>
    </div>
  </section>

  <!-- Score -->
  <section class="cardScore">
    <div class="card-inner">
      <h3>Score</h3>
    </div>
  </section>

  <!-- Team 1 -->
  <section class="cardteam1">
    <div class="card-inner">
      <h3><%= parsedGameData.team1Name %></h3>
    </div>
    <div class="teamPlayer-container">
      <% parsedGameData.team1Players.forEach(player => { %>

      <div class="teamPlayer-card">
        <div class="jerseyNumber"><%= player.jerseyNumber %></div>
        <div class="namestat-wrapper">
          <h4 class="playerName"><%= player.name %></h4>
          <div class="gameStats">
            <p class="goal">
              <%- parsedStats.scoredPoints.filter(sp => sp.scoredBy === player.playerId).length; %>
            </p>
            <p class="assist">
              <%- parsedStats.scoredPoints.filter(sp => sp.assistBy === player.playerId).length; %>
            </p>
            <p class="block">
              <%- parsedStats.scoredPoints.reduce((count, sp) => {
                    if (sp.blockPlayers) { // need to check that there is a blockPlayers object before working on it for backwards compatibility
                        return count = count + sp.blockPlayers.filter(bp => bp === player.playerId).length
                    } else {
                        return count = 0
                    }
                }, 0); %>
            </p>
            <p class="turnover">
              <%- parsedStats.scoredPoints.reduce((count, sp) => {
                    if (sp.turnoverPlayers) { // need to check that there is a turnoverPlayers object before working on it for backwards compatibility
                        return count = count + sp.turnoverPlayers.filter(tp => tp === player.playerId).length
                    } else {
                        return count = 0
                    }
                }, 0); %>
            </p>
          </div>
        </div>
      </div>
      <% }) %>
    </div>
  </section>

  <!-- Team 2 -->
  <section class="cardteam2">
    <div class="card-inner">
      <h3><%= parsedGameData.team2Name %></h3>
    </div>
    <div class="teamPlayer-container">
      <% parsedGameData.team2Players.forEach(player => { %>

      <div class="teamPlayer-card">
        <div class="jerseyNumber"><%= player.jerseyNumber %></div>
        <div class="namestat-wrapper">
          <h4 class="playerName"><%= player.name %></h4>
          <div class="gameStats">
            <p class="goal">
              <%- parsedStats.scoredPoints.filter(sp => sp.scoredBy === player.playerId).length; %>
            </p>
            <p class="assist">
              <%- parsedStats.scoredPoints.filter(sp => sp.assistBy === player.playerId).length; %>
            </p>
            <p class="block">
              <%- parsedStats.scoredPoints.reduce((count, sp) => {
                      if (sp.blockPlayers) { // need to check that there is a blockPlayers object before working on it for backwards compatibility
                          return count = count + sp.blockPlayers.filter(bp => bp === player.playerId).length
                      } else {
                          return count = 0
                      }
                  }, 0); %>
            </p>
            <p class="turnover">
              <%- parsedStats.scoredPoints.reduce((count, sp) => {
                      if (sp.turnoverPlayers) { // need to check that there is a turnoverPlayers object before working on it for backwards compatibility
                          return count = count + sp.turnoverPlayers.filter(tp => tp === player.playerId).length
                      } else {
                          return count = 0
                      }
                  }, 0); %>
            </p>
          </div>
        </div>
      </div>
      <% }) %>
    </div>
  </section>
</main>

<%- include('./partials/foot') %>